# 1. Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя,
# предусмотреть обработку ситуации деления на ноль.


# def func(x, y):
#     try:
#         return int(x) / int(y)
#     except ValueError as e:
#         return float(x) / float(y)
#     except ZeroDivisionError as e:
#         return f'На 0 делить нельзя.'
#
#
# x = input('Введите первоое число: ')
# y = input('Введите второе число: ')
#
# print(func(x, y))


# 2. Реализовать функцию, принимающую несколько параметров, описывающих
# данные пользователя: имя, фамилия, год рождения, город проживания,
# email, телефон. Функция должна принимать параметры как именованные
# аргументы. Реализовать вывод данных о пользователе одной строкой.


# def user_info(name, surname, age, city, email, phone):
#     print(f'Имя: {name}. Фамилия: {surname}. Год рождения: {age}. Город: {city}. '
#           f'email: {email}. Телефон: {phone}.')
#
#
# user_info(name='Вася', surname='Пупкин', age='20.02.2000', city='Владивосток',
#           email='vasiy@gmail.com', phone='+79685486327')


# 3. Реализовать функцию my_func(), которая принимает три позиционных
# аргумента, и возвращает сумму наибольших двух аргументов.


# def my_func(args_1, args_2, args_3):
#     my_list = [args_1, args_2, args_3]
#     number_1 = max(my_list)
#     number_min = min(my_list)
#     for i in my_list:
#         if number_1 > i > number_min:
#             number_2 = i
#     return number_1 + number_2
#
#
# print(my_func(80, 10, 7))


# 4. Программа принимает действительное положительное число x и целое
# отрицательное число y. Необходимо выполнить возведение числа x в
# степень y. Задание необходимо реализовать в виде функции
# my_func(x, y). При решении задания необходимо обойтись без встроенной
# функции возведения числа в степень.

# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая
# использование цикла.


# def my_func_2(x , y):
#     i = 1
#     value = 0
#     while i < y:
#         value += x * x
#         i += 1
#     return value
#
#
# print(my_func_2(5, 10))


# 5. Программа запрашивает у пользователя строку чисел, разделенных
# пробелом. При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и
# снова нажать Enter. Сумма вновь введенных чисел будет добавляться к
# уже подсчитанной сумме. Но если вместо числа вводится специальный
# символ, выполнение программы завершается. Если специальный символ
# введен после нескольких чисел, то вначале нужно добавить сумму этих
# чисел к полученной ранее сумме и после этого завершить программу.


# def sum_func(user_list):
#     the_sum = 0
#     for i in user_list:
#         if i == 'q':
#             pass
#         else:
#             the_sum += int(i)
#     print(f'Сумма введенных чисел: {the_sum}')
#     return the_sum
#
#
# user_sum = 0
# while True:
#     print('Введите числа разделяя их пробелом. Чтобы закончить ввод введите "q".')
#     user_list = input()
#     user_list = user_list.split()
#     user_sum += sum_func(user_list)
#     if user_list.count('q') > 0:
#         break
# print(f'Сумма всех введеных чисел: {user_sum}')


# 6. Реализовать функцию int_func(), принимающую слово из маленьких
# латинских букв и возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка
# из слов, разделенных пробелом. Каждое слово состоит из латинских букв
# в нижнем регистре. Сделать вывод исходной строки, но каждое слово
# должно начинаться с заглавной буквы. Необходимо использовать
# написанную ранее функцию int_func().


# def int_func(text):
#     return text.title()
#
# word = input('Введите слово: ')
# print(int_func(word))
