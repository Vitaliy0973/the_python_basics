# 1. Реализовать скрипт, в котором должна быть предусмотрена функция
# расчета заработной платы сотрудника. В расчете необходимо
# использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать
# скрипт с параметрами.


# from sys import argv
#
# def zp(*kwargs):
#     return int(kwargs[0][0]) * int(kwargs[0][1]) + int(kwargs[0][2])
#
#
# print(f'Заработная плата данного сотрудника равна {zp(argv[1:])}')


# 2. Представлен список чисел. Необходимо вывести элементы исходного
# списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка:
# [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].


# user_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
#
# correct_list = [user_list[i] for i in range(1, len(user_list)) if user_list[i] > user_list[i-1]]
# print(user_list)
# print(correct_list)


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.


# print([el for el in range(20, 241) if not el % 20 or not el % 21])


# 4. Представлен список чисел. Определить элементы списка, не имеющие
# повторений. Сформировать итоговый массив чисел, соответствующих
# требованию. Элементы вывести в порядке их следования в исходном
# списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


# user_list_2 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
#
# correct_list_2 = [el for el in user_list_2 if user_list_2.count(el) == 1]
# print(correct_list_2)


# 5. Реализовать формирование списка, используя функцию range() и
# возможности генератора. В список должны войти четные числа от 100 до
# 1000 (включая границы). Необходимо получить результат вычисления
# произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


# from functools import reduce
#
# user_list_3 = [el for el in range(100, 1001)]
# print(user_list_3)
# user_sum = reduce(lambda x, y: x * y, user_list_3)
# print(user_sum)


# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
